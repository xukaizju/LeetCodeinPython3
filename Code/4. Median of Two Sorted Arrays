# This is my code,The overall run time complexity is O((m+n)log (m+n))
class Solution:
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        nums = nums1 + nums2
        nums.sort()
        L = len(nums)
        if L % 2 == 0:
            return (nums[L // 2] + nums[L // 2 - 1]) / 2
        else:
            return nums[L // 2]

# This is the code of other people, The overall run time complexity is O(log (m+n))
class Solution:
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        A, B, n, m = nums1, nums2, len(nums1), len(nums2)
        if n > m:
            A, B, n, m = B, A, m, n
        # special case
        if n == 0 and m == 0:
            return 0
        elif n == 0 and m != 0:
            if m % 2 == 0:
                return (B[m // 2 - 1] + B[m // 2]) / 2
            else:
                return B[m // 2]
        
        # general case
        l, h = 0, n
        while l <= h:
            i = (l + h) // 2
            j = (n + m + 1) // 2 - i
            if i < n and B[j - 1] > A[i]:
                l = i + 1
            elif i > 0 and B[j] < A[i - 1]:
                h = i - 1
            else:
                if i == 0:
                    max_left = B[j - 1]
                elif j == 0:
                    max_left = A[i - 1]
                else:
                    max_left = max(A[i - 1], B[j - 1])
                
                if (n + m) % 2 == 1:
                    return max_left
                
                if i == n:
                    min_right = B[j]
                elif j == m:
                    min_right = A[i]
                else:
                    min_right = min(A[i], B[j])
                    
                return (max_left + min_right) / 2
